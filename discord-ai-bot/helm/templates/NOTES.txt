1. Get the application URL by running these commands:
{{- if .Values.ingress.enabled }}
{{- range $host := .Values.ingress.hosts }}
  {{- range .paths }}
  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}{{ . }}
  {{- end }}
{{- end }}
{{- else if contains "NodePort" .Values.api.service.type }}
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "discord-ai-bot.fullname" . }}-api)
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT
{{- else if contains "LoadBalancer" .Values.api.service.type }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status by running 'kubectl get svc -w {{ include "discord-ai-bot.fullname" . }}-api'
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "discord-ai-bot.fullname" . }}-api -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
  echo http://$SERVICE_IP:{{ .Values.api.service.port }}
{{- else if contains "ClusterIP" .Values.api.service.type }}
  kubectl port-forward --namespace {{ .Release.Namespace }} svc/{{ include "discord-ai-bot.fullname" . }}-api {{ .Values.api.service.port }}:{{ .Values.api.service.port }}
  echo "Visit http://127.0.0.1:{{ .Values.api.service.port }} to use your application"
{{- end }}

2. Verify your Discord bot is running:
   kubectl logs -l app.kubernetes.io/name={{ include "discord-ai-bot.name" . }} -c bot

3. Check the API health status:
   curl http://localhost:8000/health